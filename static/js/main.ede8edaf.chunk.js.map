{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","useState","results","setResults","query","setQuery","loading","setLoading","error","setError","searchInputRef","useRef","useEffect","getResults","a","async","axios","get","response","data","hits","className","src","alt","toLocaleUpperCase","onSubmit","event","preventDefault","type","onChange","e","target","value","ref","onClick","current","focus","map","result","key","objectID","href","url","title","message","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,mBCFD,WAAgB,IAAD,EACEC,mBAAS,IADX,mBACrBC,EADqB,KACZC,EADY,OAEFF,mBAAS,eAFP,mBAErBG,EAFqB,KAEdC,EAFc,OAGEJ,oBAAS,GAHX,mBAGrBK,EAHqB,KAGZC,EAHY,OAIFN,mBAAS,MAJP,mBAIrBO,EAJqB,KAIdC,EAJc,KAKtBC,EAAiBC,mBAEvBC,qBAAU,WACRC,MACC,IAEH,IAUMA,EAAa,0BAAAC,EAAAC,OAAA,uDACjBR,GAAW,GADM,oBAAAO,EAAA,MAIQE,IAAMC,IAAN,oDACwBb,KALhC,OAITc,EAJS,OAOff,EAAWe,EAASC,KAAKC,MAPV,gDASfX,EAAS,EAAD,IATO,QAYjBF,GAAW,GAZM,yDAenB,OACE,yBAAKc,UAAU,sEACb,yBACEC,IAAI,gCACJC,IAAI,aACJF,UAAU,qBAEZ,wBAAIA,UAAU,+BACXjB,EAAMoB,oBADT,SAGA,0BAAMH,UAAU,OAAOI,SAnCN,SAAAC,GACnBA,EAAMC,iBACNd,MAkCI,2BACEe,KAAK,OACLC,SAAU,SAAAC,GAAC,OAAIzB,EAASyB,EAAEC,OAAOC,QACjCA,MAAO5B,EACP6B,IAAKvB,EACLW,UAAU,uBAEZ,4BACEO,KAAK,SACLP,UAAU,gCACVa,QAASrB,GAHX,UAOA,4BACEe,KAAK,SACLP,UAAU,qCACVa,QAhDa,WACnB7B,EAAS,IACTK,EAAeyB,QAAQC,UA2CnB,UAQD9B,EACC,uBAAGe,UAAU,6BAAb,cAEA,wBAAIA,UAAU,8BACXnB,EAAQmC,KAAI,SAAAC,GAAM,OACjB,wBAAIC,IAAKD,EAAOE,UACd,uBACEnB,UAAU,wCACVoB,KAAMH,EAAOI,KAEZJ,EAAOK,YAMjBnC,GAAS,yBAAKa,UAAU,0BAA0Bb,EAAMoC,YDnF/C,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ede8edaf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n\nif (module.hot) {\n  module.hot.accept()\n}\n","import React, { useEffect, useState, useRef } from 'react'\nimport axios from 'axios'\n\nexport default function App() {\n  const [results, setResults] = useState([])\n  const [query, setQuery] = useState('react hooks')\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const searchInputRef = useRef()\n\n  useEffect(() => {\n    getResults()\n  }, [])\n\n  const handleSearch = event => {\n    event.preventDefault()\n    getResults()\n  }\n\n  const clearResults = () => {\n    setQuery('')\n    searchInputRef.current.focus()\n  }\n\n  const getResults = async () => {\n    setLoading(true)\n\n    try {\n      const response = await axios.get(\n        `http://hn.algolia.com/api/v1/search?query=${query}`\n      )\n      setResults(response.data.hits)\n    } catch (err) {\n      setError(err)\n    }\n\n    setLoading(false)\n  }\n\n  return (\n    <div className=\"container max-w-md mx-auto p-4 m-2 bg-purple-200 shadow-lg rounded\">\n      <img\n        src=\"https://icon.now.sh/react/c0c\"\n        alt=\"React Logo\"\n        className=\"float-right h-12\"\n      />\n      <h1 className=\"text-grey-darkest font-thin\">\n        {query.toLocaleUpperCase()} NEWS\n      </h1>\n      <form className=\"mb-2\" onSubmit={handleSearch}>\n        <input\n          type=\"text\"\n          onChange={e => setQuery(e.target.value)}\n          value={query}\n          ref={searchInputRef}\n          className=\"border p-1 rounded\"\n        />\n        <button\n          type=\"submit\"\n          className=\"bg-orange-500 rounded m-1 p-1\"\n          onClick={getResults}\n        >\n          Search\n        </button>\n        <button\n          type=\"button\"\n          className=\"bg-teal-500 text-white p-1 rounded\"\n          onClick={clearResults}\n        >\n          Clear\n        </button>\n      </form>\n      {loading ? (\n        <p className=\"font-bold text-orange-500\">Loading...</p>\n      ) : (\n        <ul className=\"list-reset leading-normal \">\n          {results.map(result => (\n            <li key={result.objectID}>\n              <a\n                className=\"text-indigo-500 hover:text-indigo-800\"\n                href={result.url}\n              >\n                {result.title}\n              </a>\n            </li>\n          ))}\n        </ul>\n      )}\n      {error && <div className=\"text-red-500 font-bold\">{error.message}</div>}\n    </div>\n  )\n}\n"],"sourceRoot":""}